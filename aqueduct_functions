### This file contains functions written by and in
### support of the Aqueduct project. Aqueduct provides
### server hardening automation.
###

DATE=`date +%Y-%j`;
REVISION=yes
FIX_MODE=1


function add_entry_after {
# Adds an entry after an existing entry
# 
#  arguments:
#  add_entry_after ($1, $2, $3)
#      $1      - Existing Entry
#      $2      - Entry to add
#      $3      - File to edit

        FILE=$3
        /bin/grep -qPzo -- "$1\n$2" $FILE && return
        /bin/sed -i -r -e "/^$(/bin/echo -n $1 | /usr/bin/tr "/" ".")$/d" $FILE
        /bin/sed -i -r -e "/$1/a$2" $FILE
}

function add_entry_before {
# Adds an entry before an existing entry
#  arguments:
#  add_entry_before ($1, $2, $3)
#      $1      - Existing entry
#      $2      - Entry to add
#      $3      - File to edit    

        FILE=$3
        /bin/grep -qPzo -- "$2\n$1" $FILE && return
        /bin/sed -i -r -e "/^$(/bin/echo -n $1 | /usr/bin/tr "/" ".")$/d" $FILE
        /bin/sed -i -r -e "/$2/a$1" $FILE
}
   
function line_count() {
        # Return the expected count of lines.
        BASE_COUNT=`grep -c ^$1 $2`
}


function edit_file () {

    # version 0.1
    # Takes options FILE, PDI, SHOULD_BE, BASE_STRING
    # Figures out DATE, DIRNAME, BASENAME, OWNER, PERMS

    # This assumes you have already tested the file and
    # it does not contain the "SHOULD_BE" string.

    # Example:

    # edit_file ./errno.test 366 "int main(VOID)" "int"

    FILE=$1
    PDI=$2
    SHOULD_BE=$3
    BASE_STRING=$4

    if [ ! -f $FILE ]
    then
        echo "File $FILE not found.";
        exit 1;
    fi

        # BASENAME=`basename $FILE`;
        # DIRNAME=`dirname $FILE`;
    # OWNER=`stat -c "%U" $FILE`;
    # GROUP=`stat -c "%G" $FILE`;
    # PERMS=`stat -c "%a" $FILE`;

    # cp $FILE ${DIRNAME}/${BASENAME}.${DATE}.${PDI}
        backup_file $FILE $PDI

    copy_perms $FILE ${FILE}.${DATE}.${PDI}

    line_count $BASE_STRING $FILE

    if [ $BASE_COUNT -ne 0 ]; then
        sed -i "/^$BASE_STRING/ c\
        # Edited per PDI $PDI \n$SHOULD_BE" $FILE
    else
        echo "# Modified per PDI $PDI" >> $FILE
        echo "$SHOULD_BE" >> $FILE
    fi

        copy_perms ${FILE}.${DATE}.${PDI} $FILE

    # NEW_OWNER=`stat -c "%U" $FILE`;
    # NEW_GROUP=`stat -c "%G" $FILE`;
    # NEW_PERMS=`stat -c "%a" $FILE`;

    # if [ $NEW_OWNER != $OWNER ]
    # then
    #     chown $OWNER $FILE;
    # fi

    # if [ $NEW_GROUP != $GROUP ]
    # then
    #     chgrp $GROUP $FILE;
    # fi

    # if [ $NEW_PERMS != $PERMS ]
    # then
    #     chmod $PERMS $FILE;
    # fi

}

function copy_perms() {
        # Set the owner, group, and permissions on $2 to be the same as $1

        if [ "$REVISION" == "yes" ]; then

		MODEL_FILE=$1
		FIX_FILE=$2

		MODEL_OWNER=`stat -c "%U" $MODEL_FILE`;
		MODEL_GROUP=`stat -c "%G" $MODEL_FILE`;
		MODEL_PERMS=`stat -c "%a" $MODEL_FILE`;

		FIX_OWNER=`stat -c "%U" $FIX_FILE`;
		FIX_GROUP=`stat -c "%G" $FIX_FILE`;
		FIX_PERMS=`stat -c "%a" $FIX_FILE`;

		if [ "$MODEL_OWNER" != "$FIX_OWNER" ]
		then
			chown $MODEL_OWNER $FIX_FILE;
		fi

		if [ "$MODEL_GROUP" != "$FIX_GROUP" ]
		then
			chgrp $MODEL_GROUP $FIX_FILE;
		fi

		if [ "$MODEL_PERMS" != "$FIX_PERMS" ]
		then
			chmod $MODEL_PERMS $FIX_FILE;
		fi

	fi
}


function backup_file() {
        # Make a backup of the file.
        # Requires the file as $1, the PDI as $2,

        if [ "$REVISION" == "yes" ]; then
        	cp $FILE ${FILE}.${DATE}.${PDI}
        fi
}


function is_rpm_installed() {
        # Return 0 if the RPM is installed, otherwise 1

        rpm -q $1 > /dev/null
        return $?
}

function install_rpm() {
        # Install the rpm

        yum -y install $1
}

function remove_rpm() {
        # Hmm.. maybe remove an rpm?

        yum -y erase $1
}

function is_chkconfig_on() {
        # Return 0 if the service is on in run level 3
        # $1 is the service, $2, if present, is the run level

        RL=`/sbin/runlevel | awk '{print $2}'`
        #if [ $2 -gt 1 ]
        #then
        #        RL=$2
        #fi

        chkconfig --list $1 | grep "${RL}:on"
        return $?
}

function set_chkconfig_on() {
        # Return 0 if the service can be turned on.

        chkconfig $1 on
        return $?
}

function set_chkconfig_off() {
        # Return 0 if the service is turned off.
        
        chkconfig $1 off
	return $?
}


function is_status_running() {
        # Return 0 if the service is currently running

        service $1 status
        return $?
}

function set_status_running() {
        # Return 0 if the service was just turned on.

        service $1 start
        return $?
}

function can_yum() {
        # Check to see if you can connect to a yum service
        # Looks for part of the string "This system is receiving updates from RHN Classic or RHN Satellite."

        HAVE_STRING=`yum check-update | grep -c "system is receiving"`
        if [ $HAVE_STRING -gt 0 ]
        then
                return 0
        else
                return 1
        fi
}


# 
function show_message() {
	NORMAL="\\033[0;39m"
	RED="\\033[1;31m"
	GREEN="\\033[1;32m"
	YELLOW="\\033[1;33m"

	msg_test=$1
	msg_result=$2
	msg_severity=$3

	# Passed
	if   [ "$msg_severity" == "pass" ]; then
		msg_severity="${GREEN}OK${NORMAL}"
	elif [ "$msg_severity" == "fixed" ]; then
		msg_severity="${GREEN}FIXED${NORMAL}"
	elif [ "$msg_severity" == "allow" ]; then
		msg_severity="${YELLOW}ALLOWED${NORMAL}"
	elif [ "$msg_severity" ==  "info" ]; then
		msg_severity="${YELLOW}INFO${NORMAL}"
	else
		msg_severity="${RED}$msg_severity${NORMAL}"
	fi

	#if [ $TERSE -eq 1 ]; then
	#	echo -e "$msg_severity:$msg_test:$msg_result"
	#else
		echo -e "$msg_test: $msg_result \\033[60G[$msg_severity]"
	#fi
	
}

# <path> <test text> <severity> <check type>
function MountCheck() {
	path=$1
	test=$2
	severity=$3
	check=$4

	if mountpoint -q $path; then
		show_message "$test" detected pass
		
		true 
	else
		show_message "$test" "not detected" $severity
		false 
	fi

}

# verify_setting
function verify_setting {
  findvar=$1
  replacevar=$2
  targetfile=$3
  msg_test=$4
  msg_result=$5
  msg_severity=$6

  if egrep -qi "$findvar" $targetfile; then
    show_message "$msg_test" "$msg_result" pass
  else
    if [ "$FIX_MODE" == "1" ]; then

#      perl -pi -e "s/$replacevar/i" $targetfile

      show_message "$msg_test" "$msg_result" fixed

    else
      show_message "$msg_test" "$msg_result" "$msg_severity"
    fi
    return 1
  fi
}

# check_owner <user> <path> <pdi> <mod_msg>
function check_owner {
        owner=$1
        filename=$2
        PDI=$3
        MOD_MSG=$4

        CUROWN=`stat -c %U $filename`
        if [ "$CUROWN" != "$owner" ];then
                chown $owner $filename
                show_message $PDI "$MOD_MSG" fixed
        else
                show_message $PDI "$MOD_MSG" pass

        fi

}

# check_group <user> <path> <pdi> <mod_msg>
function check_group {
        owner=$1
        filename=$2
        PDI=$3
        MOD_MSG=$4

        CUROWN=`stat -c %G $filename`
        if [ "$CUROWN" != "$owner" ];then
                chgrp $owner $filename
                show_message $PDI "$MOD_MSG" fixed
        else
                show_message $PDI "$MOD_MSG" pass

        fi

}

# check_perms <mode> <path> <pdi> <mod_msg>
function check_perms {
        mode=$1
        filename=$2
        PDI=$3
        MOD_MSG=$4

        if [ -e $filename ]; then
                FILEPERMS=`stat -L --format='%04a' $filename`

                FILESPECIAL=${FILEPERMS:0:1}
                FILEOWNER=${FILEPERMS:1:1}
                FILEGROUP=${FILEPERMS:2:1}
                FILEOTHER=${FILEPERMS:3:1}
        fi

        FIELD1=`echo $mode | awk '{printf "%s",substr($1,1,1)}'`
        FIELD2=`echo $mode | awk '{printf "%s",substr($1,2,1)}'`
        FIELD3=`echo $mode | awk '{printf "%s",substr($1,3,1)}'`
        FIELD4=`echo $mode | awk '{printf "%s",substr($1,4,1)}'`

        if [ $(($FILESPECIAL&7)) != "$FIELD1" ] || [ $(($FILEOWNER&7)) != "$FIELD2" ] || [ $(($FILEGROUP&7)) != "$FIELD3" ] || [ $(($FILEOTHER&7)) != "$FIELD4" ]; then
                chmod $mode $filename
                show_message $PDI "$MOD_MSG" fixed
        else
                show_message $PDI "$MOD_MSG" pass

        fi

}





# gconf_setting
#gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type int --set /apps/gnome-screensaver/idle_delay 15
#gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type bool --set /apps/gnome-screensaver/idle_activation_enabled true
#gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type bool --set /apps/gnome-screensaver/lock_enabled true
#gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type string --set /apps/gnome-screensaver/mode blank-only
#gdm gconftool-2 --type bool --set /apps/gdm/simple-greeter/banner_message_enable true
#gdm gconftool-2 --type string --set /apps/gdm/simple-greeter/banner_message_text <BIG ARRAY>
#gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type string --set /apps/gnome_settings_daemon/keybindings/screensaver "<Control><Alt>l"

# gconf_setting <type> <path> <value> <pdi> <mod_msg>
function gconf_setting {
	type=$1
	path=$2
	value=$3
	PDI=$4
	MOD_MSG=$5

	G_CONF=`gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --get  $path 2>/dev/null`	

	if [ "$G_CONF" != "$value" ]; then
	
		gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.mandatory --type $type --set $path $value
		show_message $PDI "$MOD_MSG" fixed
	else
		show_message $PDI "$MOD_MSG" pass
	fi
} 
